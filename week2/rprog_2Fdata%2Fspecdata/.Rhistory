source('~/.active-rstudio-document', echo=TRUE)
?rnorm
make.NegLogLik <- function(data, fixed=c(FALSE, FALSE))
{
params <- fixed
function(p)
{
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data) * log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a+b)
}
}
set.seed(1); normals <- rnorm(100, 1, 2)
nLL <- make.NegLogLik(normals)
nLL
ls(environmentnLL)
v
set.seed(1); normals <- rnorm(100, 1, 2)
nLL <- make.NegLogLik(normals)
nLL
ls(environment(nLL))
View(make.NegLogLik)
make.NegLogLik <- function(data, fixed=c(FALSE, FALSE))
{
params <- fixed
function(p)
{
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data) * log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a+b)
}
}
?browser
make.NegLogLik <- function(data, fixed=c(FALSE, FALSE))
{
params <- fixed
function(p)
{
browser()
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data) * log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a+b)
}
}
nLL <- make.NegLogLik(normals)
browser()
exit
quit
make.NegLogLik <- function(data, fixed=c(FALSE, FALSE))
{
params <- fixed
function(p)
{
browser()
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data) * log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a+b)
}
}
set.seed(1); normals <- rnorm(100, 1, 2)
nLL <- make.NegLogLik(normals)
nLL
p
where
ls(environment(nLL))
?optim
?optimize
nLL <- make.NegLogLik(normals, c(FALSE, 2)) # sigma = 2
optimize(nLL, c(-1, 3))$minimum
params
fixed
!fixed
params
p
?browser()
nLL <- make.NegLogLik(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len=100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "1")
make.NegLogLik <- function(data, fixed=c(FALSE, FALSE))
{
params <- fixed
function(p)
{
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data) * log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a+b)
}
}
nLL <- make.NegLogLik(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len=100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "1")
?plot
nLL <- make.NegLogLik(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len=100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "l")
?rnrom
?rnorm
nLL <- make.NegLogLik(normals, c(FALSE, 2))
x <- seq(0.5, 1.5, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "l")
nLL <- make.NegLogLik(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len=100) ## Create a sequence of values for the X-coorinate
y <- sapply(x, nLL) ## Apply the nLL function to the X coordinates, to produce the corresponding y coordinates.
plot(x, exp(-(y - min(y))), type = "l")
nLL <- make.NegLogLik(normals, c(FALSE, 2))
x <- seq(0.5, 1.5, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "l")
```{r}
x <- Sys.time()
x
p <- as.POSIXlt(x)
names(unclass(p))
p$sec
x <- Sys.time()
x
p <- as.POSIXlt(x)
names(unclass(p))
p$sec
names(p)
p$zone
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
class(x)
x <- as.Date("2012-01-01")
y <- strptime("9 Jan 2011 11:34:21", "%d %b %Y %H:%M:%S")
x - y ## Error, can't mix different classes
class(x)
class(y)
x - y ## Error, can't mix different classes
x <- as.POSIXlt(x)
x - y.
x - y ## Error, can't mix different classes
x <- as.POSIXlt(x)
x - y
x <- as.Date("2012-03-01")
y <- as.Date("2012-02-28")
x - y
x <- as.POSIXct("2012-10-25 01:00:00")
y <- as.POSIXct("2012-10-25 06:00:00", tz = "GMT")
y - x
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
getwd()
setwd("R-Programming/week2")
dir()
directory<-"."
setwd(directory)
directory<-"rprog_2Fdata%2Fspecdata"
setwd(directory)
dir()
directory<-"rprog_2Fdata%2Fspecdata/specdata"
setwd(directory)
setwd("..")
setwd(directory)
dir()
?read.csv
read.csv(id)
id<-1:332
read.csv(id)
n<-1
as.character(n)
as.character(n)+".csv"
as.character(n)&".csv"
"one" & " ".csv"
"one" + " ".csv"
?tostring
?toString
?paste
paste(as.character(n), ".csv", sep="")
?read.csv
id = 1:332
?rbind
resultsDF <- data.frame()
for (n in id)
{
fileName <- paste(as.character(n), ".csv", sep="")
currentDF <- read.csv(fileName)
resultsDF <- rbind(resultsDF, currentDF)
}
dir()
as.character()
?print
print(as.character(id[1]))
print(as.character(id[1]), digits=3)
n<-1
fileName <- paste(str_pad(as.character(n), 3, pad="0", ".csv", sep="")
)
sprintf("%03d", n)
n<-111
sprintf("%03d", n)
fileName <- sprintf("%03d.csv", n)
fileName
currentDF <- read.csv(fileName)
resultsDF <- data.frame()
resultsDF <- rbind(resultsDF, currentDF)
View(currentDF)
pollutant="sulfate"
resultsDF[pollutant]
mean(resultsDF[pollutant])
?mean
mean(resultsDF[pollutant], na.rm=TRUE)
as.numeric(resultsDF[pollutant])
as.vector(resultsDF[pollutant])
as.numeric(as.vector(resultsDF[pollutant]))
na.omit(resultsDF)
na.omit(resultsDF[pollutant])
mean(na.omit(resultsDF[pollutant]))
as.numeric(na.omit(resultsDF[pollutant]))
str(na.omit(resultsDF[pollutant]))
unclass(na.omit(resultsDF[pollutant]))
as.numeric(unclass(na.omit(resultsDF[pollutant])))
na.omit(resultsDF[pollutant]))
na.omit(resultsDF[pollutant])
str(na.omit(resultsDF[pollutant]))
mean(subset(resultsDF)[pollutant])
mean(subset(resultsDF)[[pollutant]])
mean(subset(resultsDF)[[pollutant]], na.rm=TRUE)
pwd()
getwd()
setwd("..")
?setwd
pollutantmean <- function(directory, pollutant, id = 1:332)
{
## 'directory' is a character vector of length 1 indicating the location of the CSV file
## 'pollutant' is a character vector of length 1 indicating the name of the pollutant for which we will calculate the mean; either 'sulfate' or 'nitrate'
## 'id' is an integer vector indicating the monitor ID numbers to be used.
## Return the mean of the pollutant across all monitors listed in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
cwd <- getwd()
setwd(directory)
resultsDF <- data.frame()
for (n in id)
{
fileName <- sprintf("%03d.csv", n)
currentDF <- read.csv(fileName)
resultsDF <- rbind(resultsDF, currentDF)
}
setwd(cwd)
mean(subset(resultsDF)[[pollutant]], na.rm=TRUE)
}
polutantmean ("specdata", "sulfate", 1:10)
pollutantmean ("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
?mean
?sprintf
sprintf("%f*3", 1.2345678)
sprintf("%f.3", 1.2345678)
sprintf("%f3.3", 1.2345678)
sprintf("%.3f", 1.2345678)
pollutantmean <- function(directory, pollutant, id = 1:332)
{
## 'directory' is a character vector of length 1 indicating the location of the CSV file
## 'pollutant' is a character vector of length 1 indicating the name of the pollutant for which we will calculate the mean; either 'sulfate' or 'nitrate'
## 'id' is an integer vector indicating the monitor ID numbers to be used.
## Return the mean of the pollutant across all monitors listed in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
cwd <- getwd()
setwd(directory)
resultsDF <- data.frame()
for (n in id)
{
fileName <- sprintf("%03d.csv", n)
currentDF <- read.csv(fileName)
resultsDF <- rbind(resultsDF, currentDF)
}
setwd(cwd)
sprintf("%.3f", mean(subset(resultsDF)[[pollutant]], na.rm=TRUE))
}
## Example output
#source("pollutantmean.R")
#pollutantmean("specdata", "sulfate", 1:10)
### [1] 4.064
#pollutantmean("specdata", "nitrate", 70:72)
### [1] 1.706
#pollutantmean("specdata", "nitrate", 23)
### [1] 1.281
pollutantmean ("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
