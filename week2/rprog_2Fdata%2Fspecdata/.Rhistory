n<-2
idNumber <- id[n]
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
nrow(currentFile)
nrow(na.omit(currentFile))
n
resultDF$nobs[n] <- nrow(na.omit(currentFile))
n<-3
idNumber <- id[n]
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
resultDF$nobs[n] <- nrow(na.omit(currentFile))
n<-4
idNumber <- id[n]
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
resultDF$nobs[n] <- nrow(na.omit(currentFile))
n<-5
idNumber <- id[n]
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
resultDF$nobs[n] <- nrow(na.omit(currentFile))
resultDF
complete <- function(directory, id = 1:332)
{
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used.
## Return a data frame of the form:
## id nobs
## 1 117
## 2 1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the number of complete cases
cwd <- getwd()
setwd(directory)
resultDF <- data.frame(id, nobs=numeric(length = length(id)))
for(n in length(id))
{
idNumber <- id[n]
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
resultDF$nobs[n] <- nrow(na.omit(currentFile))
}
setwd(cwd)
resultDF
}
getwd()
setwd("..")
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332)
{
browser()
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used.
## Return a data frame of the form:
## id nobs
## 1 117
## 2 1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the number of complete cases
cwd <- getwd()
setwd(directory)
resultDF <- data.frame(id, nobs=numeric(length = length(id)))
for(n in length(id))
{
idNumber <- id[n]
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
resultDF$nobs[n] <- nrow(na.omit(currentFile))
}
setwd(cwd)
resultDF
}
getwd()
complete("specdata", c(2, 4, 8, 10, 12))
id
idNumber
id
getwd()
setwd("..")
complete <- function(directory, id = 1:332)
{
browser()
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used.
## Return a data frame of the form:
## id nobs
## 1 117
## 2 1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the number of complete cases
cwd <- getwd()
setwd(directory)
resultDF <- data.frame(id, nobs=numeric(length = length(id)))
for(n in 1:length(id))
{
idNumber <- id[n]
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
resultDF$nobs[n] <- nrow(na.omit(currentFile))
}
setwd(cwd)
resultDF
}
complete("specdata", 1)
getwd()
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
?cor
?rbind
getwd()
directory<-"specdata")
directory<-"specdata"
cwd <- getwd()
setwd(directory)
id <- 1:332
resultV <- vector(length(id))
resultV <- vector(length = length(id))
?vector
resultV <- vector(mode="numeric", length=length(id))
length(id)
n<-1
idNumber <- id[n]
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
completeCases <- na.omit(currentFile)
nobs <- nrow(completeCases)
nobs
nobs >= threshold
threshold <- 0
nobs >= threshold
completeCases$sulfate
cor(completeCases$sulfate, completeCases$nitrate)
resultV[n] <- cor(completeCases$sulfate, completeCases$nitrate)
resultV
na.omit(resultV)
vector(mode="raw", length=length(id))
resultV <- vector(mode="raw", length=length(id))
na.omit(resultV)
resultV <- vector(mode="numeric", length=length(id))
resultV[1]
resultV[1]
resultV[2]
?vector
resultV <- c(length=length(id))
resultV
?vector
resultV <- vector(mode="numeric", length=length(id))
resultV
resultV <- NA
resultV
resultV <- vector(NA)
x <- matrix(data=NA, nrow=length(id), ncol=1)
x
na.omit(resultV)
as.vector(resultV)
na.omit(x)
x[2] <- 0.1234
x[20] <- 0.463451234
x
na.omit(x)
as.vector(na.omit(x))
x <- matrix(data=NA, nrow=length(id), ncol=1)
resultV <- matrix(NA, nrow=length(id), ncol=1)
n
idNumber
fileName
completeCases <- na.omit(currentFile)
nobs <- nrow(completeCases)
resultV[n] <- cor(completeCases$sulfate, completeCases$nitrate)
idNumber <- 150
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
completeCases <- na.omit(currentFile)
nobs <- nrow(completeCases)
nobs
n<-150
resultV[n] <- cor(completeCases$sulfate, completeCases$nitrate)
getwd()
setwd("..")
corr <- function(directory, threshold = 0)
{
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number of completely observed observations (on all variables) required to compute the correlation between nitrate and sulfate; the default is 0
## Returns a numeric vector of correlations
## NOTE: Do not round the results!
cwd <- getwd()
setwd(directory)
# Just assume a fixed set of files
id <- 1:332
# Then we can create a fixed size table to fill in, using NA to represent entries we haven't filled in.
resultV <- matrix(NA, nrow=length(id), ncol=1)
for(n in 1:length(id))
{
idNumber <- id[n]
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
completeCases <- na.omit(currentFile)
nobs <- nrow(completeCases)
# Some elements of resultV will be empty
if(nobs >= threshold)
{
resultV[n] <- cor(completeCases$sulfate, completeCases$nitrate)
}
}
setwd(cwd)
na.omit(resultV)
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0)
{
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number of completely observed observations (on all variables) required to compute the correlation between nitrate and sulfate; the default is 0
## Returns a numeric vector of correlations
## NOTE: Do not round the results!
cwd <- getwd()
setwd(directory)
# Just assume a fixed set of files
id <- 1:332
# Then we can create a fixed size table to fill in, using NA to represent entries we haven't filled in.
resultV <- matrix(NA, nrow=length(id), ncol=1)
for(n in 1:length(id))
{
idNumber <- id[n]
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
completeCases <- na.omit(currentFile)
nobs <- nrow(completeCases)
# Some elements of resultV will be empty
if(nobs >= threshold)
{
resultV[n] <- round(cor(completeCases$sulfate, completeCases$nitrate), digits=5)
}
}
setwd(cwd)
na.omit(resultV)
}
cr <- corr("specdata", 150)
?options
options(digits)
options()
options$digits
getOption("digits")
options("digits"=3)
corr <- function(directory, threshold = 0)
{
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number of completely observed observations (on all variables) required to compute the correlation between nitrate and sulfate; the default is 0
## Returns a numeric vector of correlations
## NOTE: Do not round the results!
cwd <- getwd()
setwd(directory)
# Just assume a fixed set of files
id <- 1:332
# Then we can create a fixed size table to fill in, using NA to represent entries we haven't filled in.
resultV <- matrix(NA, nrow=length(id), ncol=1)
for(n in 1:length(id))
{
idNumber <- id[n]
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
completeCases <- na.omit(currentFile)
nobs <- nrow(completeCases)
# Some elements of resultV will be empty
if(nobs >= threshold)
{
resultV[n] <- cor(completeCases$sulfate, completeCases$nitrate)
}
}
setwd(cwd)
na.omit(resultV)
}
cr <- corr("specdata", 150)
head(cr)
options("digits"=1)
head(cr)
options("digits"=0)
head(cr)
options("digits"=1)
head(cr)
options("digits"=2)
head(cr)
options("digits"=7)
head(cr)
options("digits"=5)
head(cr)
options("digits"=4)
head(cr)
pollutantmean <- function(directory, pollutant, id = 1:332)
{
## 'directory' is a character vector of length 1 indicating the location of the CSV file
## 'pollutant' is a character vector of length 1 indicating the name of the pollutant for which we will calculate the mean; either 'sulfate' or 'nitrate'
## 'id' is an integer vector indicating the monitor ID numbers to be used.
## Return the mean of the pollutant across all monitors listed in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
# Set the expected number of digits
options("digits"=4)
cwd <- getwd()
setwd(directory)
resultsDF <- data.frame()
for (n in id)
{
fileName <- sprintf("%03d.csv", n)
currentDF <- read.csv(fileName)
resultsDF <- rbind(resultsDF, currentDF)
}
setwd(cwd)
mean(subset(resultsDF)[[pollutant]], na.rm=TRUE)
}
getwd()
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
complete <- function(directory, id = 1:332)
{
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used.
## Return a data frame of the form:
## id nobs
## 1 117
## 2 1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the number of complete cases
cwd <- getwd()
setwd(directory)
resultDF <- data.frame(id, nobs=numeric(length = length(id)))
for(n in 1:length(id))
{
idNumber <- id[n]
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
resultDF$nobs[n] <- nrow(na.omit(currentFile))
}
setwd(cwd)
resultDF
}
getwd()
pollutantmean <- function(directory, pollutant, id = 1:332)
{
## 'directory' is a character vector of length 1 indicating the location of the CSV file
## 'pollutant' is a character vector of length 1 indicating the name of the pollutant for which we will calculate the mean; either 'sulfate' or 'nitrate'
## 'id' is an integer vector indicating the monitor ID numbers to be used.
## Return the mean of the pollutant across all monitors listed in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
# Set the expected number of digits
options("digits"=4)
cwd <- getwd()
setwd(directory)
resultsDF <- data.frame()
for (n in id)
{
fileName <- sprintf("%03d.csv", n)
currentDF <- read.csv(fileName)
resultsDF <- rbind(resultsDF, currentDF)
}
setwd(cwd)
mean(subset(resultsDF)[[pollutant]], na.rm=TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
corr <- function(directory, threshold = 0)
{
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number of completely observed observations (on all variables) required to compute the correlation between nitrate and sulfate; the default is 0
## Returns a numeric vector of correlations
## NOTE: Do not round the results!
# Set the expected number of digits
options("digits"=4)
cwd <- getwd()
setwd(directory)
# Just assume a fixed set of files
id <- 1:332
# Then we can create a fixed size table to fill in, using NA to represent entries we haven't filled in.
resultV <- matrix(NA, nrow=length(id), ncol=1)
for(n in 1:length(id))
{
idNumber <- id[n]
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
completeCases <- na.omit(currentFile)
nobs <- nrow(completeCases)
# Some elements of resultV will be empty
if(nobs >= threshold)
{
resultV[n] <- as.vector(cor(completeCases$sulfate, completeCases$nitrate))
}
}
setwd(cwd)
na.omit(resultV)
}
cr <- corr("specdata", 150)
head(cr)
# https://www.coursera.org/learn/r-programming/supplement/amLgW/programming-assignment-1-instructions-air-pollution
# Write a function that takes a directory of data files and a threshold for complete cases and calculates the correlation between sulfate and nitrate for monitor locations where the number of completely observed cases (on all variables) is greater than the threshold.
# The function should return a vector of correlations for the monitors that meet the threshold requirement. If no monitors meet the threshold requirement, then the function should return a numeric vector of length 0.
# For this function you will need to use the 'cor' function in R which calculates the correlation between two vectors.
# Please read the help page for this function via '?cor' and make sure that you know how to use it.
corr <- function(directory, threshold = 0)
{
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number of completely observed observations (on all variables) required to compute the correlation between nitrate and sulfate; the default is 0
## Returns a numeric vector of correlations
## NOTE: Do not round the results!
# Set the expected number of digits
options("digits"=4)
cwd <- getwd()
setwd(directory)
# Just assume a fixed set of files
id <- 1:332
# Then we can create a fixed size table to fill in, using NA to represent entries we haven't filled in.
resultV <- matrix(NA, nrow=length(id), ncol=1)
for(n in 1:length(id))
{
idNumber <- id[n]
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
completeCases <- na.omit(currentFile)
nobs <- nrow(completeCases)
# Some elements of resultV will be empty
if(nobs >= threshold)
{
resultV[n] <- cor(completeCases$sulfate, completeCases$nitrate)
}
}
setwd(cwd)
as.vector(na.omit(resultV))
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
v
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
cr <- corr("specdata", 5000)''
cr <- corr("specdata", 5000)
summary(cr)
cr
length(cr)
str(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
?as.vector
corr <- function(directory, threshold = 0)
{
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number of completely observed observations (on all variables) required to compute the correlation between nitrate and sulfate; the default is 0
## Returns a numeric vector of correlations
## NOTE: Do not round the results!
# Set the expected number of digits
options("digits"=4)
cwd <- getwd()
setwd(directory)
# Just assume a fixed set of files
id <- 1:332
# Then we can create a fixed size table to fill in, using NA to represent entries we haven't filled in.
resultV <- matrix(NA, nrow=length(id), ncol=1)
for(n in 1:length(id))
{
idNumber <- id[n]
fileName <- sprintf("%03d.csv", idNumber)
currentFile <- read.csv(fileName)
completeCases <- na.omit(currentFile)
nobs <- nrow(completeCases)
# Some elements of resultV will be empty
if(nobs >= threshold)
{
resultV[n] <- cor(completeCases$sulfate, completeCases$nitrate)
}
}
setwd(cwd)
as.vector(na.omit(resultV), mode="numeric")
}
cr <- corr("specdata", 5000)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata", 150)
head(cr)
summary(cr)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
